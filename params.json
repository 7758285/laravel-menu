{"name":"Laravel-menu","tagline":"A simple Laravel way of creating menus","body":"# Laravel Menu\r\n[![Latest Unstable Version](https://poser.pugx.org/lavary/laravel-menu/v/unstable.svg)](https://packagist.org/packages/lavary/laravel-menu)\r\n\r\n\r\nA Simple Laravel way of making menus.\r\n\r\n\r\n## Installation\r\n\r\nIn the `require` key of `composer.json` file add `lavary/laravel-menu\": \"dev-master`:\r\n\r\n```\r\n...\r\n\"require\": {\r\n\t\"laravel/framework\": \"4.1.*\",\r\n\t\"lavary/laravel-menu\": \"dev-master\"\r\n  }  \r\n```\r\n  \r\nRun the composer update command:\r\n\r\n```bash\r\ncomposer update\r\n```\r\n\r\nNow append Laravel Menu service provider to  `providers` array in `app/config/app.php`.\r\n\r\n```php\r\n<?php\r\n\r\n'providers' => array(\r\n\r\n    'Illuminate\\Foundation\\Providers\\ArtisanServiceProvider',\r\n    'Illuminate\\Auth\\AuthServiceProvider',\r\n    ...\r\n    'Lavary\\Menu\\ServiceProvider',\r\n\r\n),\r\n?>\r\n```\r\n\r\nAt the end of `config/app.php` add `'Menu'    => 'Lavary\\Menu\\Facade'` to the `$aliases` array:\r\n\r\n```php\r\n<?php\r\n\r\n'aliases' => array(\r\n\r\n    'App'        => 'Illuminate\\Support\\Facades\\App',\r\n    'Artisan'    => 'Illuminate\\Support\\Facades\\Artisan',\r\n    ...\r\n    'Menu'       => 'Lavary\\Menu\\Facade',\r\n\r\n),\r\n?>\r\n```\r\n\r\nThis registers the package with Laravel and creates an alias called `Menu`.\r\n\r\n\r\n## Basic Usage\r\n\r\n\r\nMenus can be defined in `app/routes.php` or `start/global.php` or any other place you wish as long as it is auto loaded when a request hits your application.\r\n\r\n\r\nHere is a basic usage:\r\n\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n  \r\n  $menu->add('Home',     '');\r\n  $menu->add('About',    'about');\r\n  $menu->add('services', 'services');\r\n  $menu->add('Contact',  'contact');\r\n  \r\n});\r\n?>\r\n```\r\n\r\n**Attention** `$MyNavBar` is just a hypothetical name I used in these examples.\r\n\r\n`Menu::make()` creates a menu named `MyNavBar` and makes `$myNavBar` object available in all views.\r\n\r\nThis method accepts a callable where you can define your items in there using the `add` method. First parameter in `add` method is the *item title* and second one is the *url*. \r\n\r\n`add` adds a new item to the menu and returns an instance of `MenuItem`.\r\n\r\n**To render the menu in your view:**\r\n\r\n```html\r\n{{ $MyNavBar->asUl() }}\r\n```\r\n\r\nThis will render your menu as below:\r\n\r\n```html\r\n<ul>\r\n  <li><a href=\"http://yourdomain.com\">Home</a></li>\r\n  <li><a href=\"http://yourdomain.com/about\">About</a></li>\r\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\r\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\r\n</ul>\r\n```\r\n\r\n## Named Routs and Controller Actions\r\n\r\nYou can also define named routes or controller actions as item url:\r\n\r\n```php\r\n<?php\r\n\r\n...\r\n// Suppose we have these routes defined in our app/routes.php file:\r\nRoute::get('/',        array('as' => 'home.page',  function(){...}));\r\nRoute::get('about',    array('as' => 'page.about', function(){...}));\r\nRoute::get('services', 'ServiceController@index');\r\n...\r\n\r\n// Now we make the menu:\r\nMenu::make('MyNavBar', function($menu){\r\n  \r\n  // the second parameter can be string or an array containing options \r\n  $menu->add('Home',     array('route'  => 'home.page'));\r\n  $menu->add('About',    array('route'  => 'page.about'));\r\n  $menu->add('services', array('action' => 'ServicesController@index'));\r\n  $menu->add('Contact',  'contact');\r\n\r\n});\r\n?>\r\n```\r\nif you need to send some data to routes, urls or controller actions as query string, you can simply include them in an array along with the route action or url value:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n  \r\n  // the second parameter can be string or an array containing options \r\n  $menu->add('Home',     array('route'  => 'home.page'));\r\n  $menu->add('About',    array('route'  => array('page.about', 'template' => 1)));\r\n  $menu->add('services', array('action' => array('ServicesController@index', 'id' => 12)));\r\n  $menu->add('Contact',  'contact');\r\n\r\n});\r\n?>\r\n```\r\n\r\n## HTTPS\r\n\r\nIf you need to serve the route over HTTPS, you can add `secure` to the options array and set it to `true`:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\t....\r\n\t$menu->add('Members', array('url' => 'members', 'secure' => true));\r\n\t...\r\n});\r\n?>\r\n```\r\n\r\nOutput as ul:\r\n\r\n```html\r\n<ul>\r\n\t...\r\n\t<li><a href=\"https://yourdomain.com/members\">Members</a></li>\r\n\t...\r\n</ul>\r\n```\r\n\r\n## Sub-menus\r\n\r\nItems can have subitems too:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  ...\r\n  \r\n  $about = $menu->add('About',    array('route'  => 'page.about'));\r\n  \r\n  // these items will go under MenuItem $about\r\n  $about->add('Who are we?', 'who-we-are');\r\n  $about->add('What we do?', 'what-we-do');\r\n  \r\n  ...\r\n\r\n});\r\n?>\r\n```\r\n\r\nYou can also chain the item definitions and go as deep as you wish:\r\n\r\n```php  \r\n<?php\r\n\r\n  ...\r\n  \r\n  $about = $menu->add('About',    array('route'  => 'page.about'))\r\n\t\t     ->add('Level2', 'link address')\r\n\t\t          ->add('level3', 'Link address')\r\n\t\t               ->add('level4', 'Link address');\r\n        \r\n  ...      \r\n?>\r\n```  \r\n\r\nIt is possible to add sub items directly using `pid` key:\r\n\r\n```php  \r\n<?php\r\n...\r\n$about = $menu->add('About',    array('route'  => 'page.about'));\r\n$menu->add('Level2', array('url' => 'Link address', 'pid' => $about->get_id()));\r\n...\r\n?>\r\n```  \r\n\r\n## HTML attributes\r\n\r\nSince all menu items would be rendered as html entities like lists or divs, you can define as many properties as you need for each menu item:\r\n\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  $menu->add('Home',     array('route'  => 'home.page',  'class' => 'navbar navbar-home', 'id' => 'home'));\r\n  $menu->add('About',    array('route'  => 'page.about', 'class' => 'navbar navbar-about dropdown'));\r\n  $menu->add('services', array('action' => 'ServicesController@index'));\r\n  $menu->add('Contact',  'contact');\r\n\r\n});\r\n?>\r\n```\r\n\r\nIf we choose html lists as our rendering format like `ul` or `ol`, the result would be something similiar to this:\r\n\r\n```html\r\n<ul>\r\n  <li class=\"navbar navbar-home\" id=\"home\"><a href=\"http://yourdomain.com\">Home</a></li>\r\n  <li class=\"navbar navbar-about dropdown\"><a href=\"http://yourdomain.com/about\">About</a></li>\r\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\r\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\r\n</ul>\r\n```\r\n\r\n## Links\r\n\r\nAll the html attributes will go to `<li>` tags. How about the attributes for `<a>` tags?\r\n\r\nEach `MenuItem` instance has an attribute holding an instance of the `Link` class. This class is provided for you to manipulate `<a>` tags.\r\n\r\nTo add some attributes to the link you can use the `attributes()` method of `Link` object:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  ...\r\n  \r\n  $about = $menu->add('About',    array('route'  => 'page.about', 'class' => 'navbar navbar-about dropdown'));\r\n  \r\n  $about->link->attributes(array('class' => 'dropdown-toggle', 'data-toggle' => 'dropdown'));\r\n  \r\n  ...\r\n\r\n});\r\n?>\r\n```\r\n\r\nYou can also `append` or `prepend` html or plain text content to the link text:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  ...\r\n  \r\n  $about = $menu->add('About',    array('route'  => 'page.about', 'class' => 'navbar navbar-about dropdown'));\r\n  \r\n  $about->link->attributes(array('class' => 'dropdown-toggle', 'data-toggle' => 'dropdown'))\r\n              ->append('<b classs=\"caret\"></b>')\r\n              ->prepend('<span classs=\"glyphicon glyphicon-user\"></span> ');\r\n              \r\n  ...            \r\n\r\n});\r\n?>\r\n```\r\n\r\nThe above code will result:\r\n\r\n```html\r\n<ul>\r\n  ...\r\n  \r\n  <li class=\"navbar navbar-about dropdown\">\r\n   <a href=\"about\" class=\"dropdown-toggle\" data-toggle=\"dropdown\">\r\n     <span class=\"glyphicon glyphicon-user\"></span> About <b classs=\"caret\"></b>\r\n   </a>\r\n  </li>\r\n</ul>\r\n\r\n```\r\n\r\n## Menu Groups\r\n\r\nSometimes you may need to share attributes to a group of items. Instead of specifying the attributes on each menu, you may use a menu group:\r\n\r\n**PS:** This feture works exactly like Laravel group routes. \r\n\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  $menu->add('Home',     array('route'  => 'home.page', 'class' => 'navbar navbar-home', 'id' => 'home'));\r\n  \r\n  $menu->group(array('style' => 'padding: 0', 'data-role' => 'navigation') function($m){\r\n    \r\n        $m->add('About',    array('route'  => 'page.about', 'class' => 'navbar navbar-about dropdown'));\r\n        $m->add('services', array('action' => 'ServicesController@index'));\r\n  }\r\n  \r\n  $menu->add('Contact',  'contact');\r\n\r\n});\r\n?>\r\n```\r\n\r\nAttributes `style` and `data-role` would be applied to both `About` and `Services` items:\r\n\r\n```html\r\n<ul>\r\n    <li class=\"navbar navbar-home\" id=\"home\"><a href=\"http://yourdomain.com\">Home</a></li>\r\n    <li style=\"padding: 0\" data-role=\"navigation\" class=\"navbar navbar-about dropdown\"><a href=\"http://yourdomain.com/about\"About</a></li>\r\n    <li style=\"padding: 0\" data-role=\"navigation\"><a href=\"http://yourdomain.com/services\">Services</a></li>\r\n</ul>\r\n```\r\n\r\n\r\n## Item Prefixing\r\n\r\nJust like Laravel route prefixing feature, a group of menu items may be prefixed by using the prefix option in the attributes array of a group:\r\n\r\n**Attention:** Prefixing only works on the menu items addressed with `url` but not `route` or `action`. \r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  $menu->add('Home',     array('route'  => 'home.page', 'class' => 'navbar navbar-home', 'id' => 'home'));\r\n  \r\n  $about = $menu->add('About', array('url'  => 'about', 'class' => 'navbar navbar-about dropdown'));  // URL: /about \r\n  $about->group(array('prefix' => 'about') function($m){\r\n  \r\n  \t$about->add('Who we are?', 'who-we-are');   // URL: about/who-we-are\r\n  \t$about->add('What we do?', 'what-we-do');   // URL: about/what-we-do\r\n  \t\r\n  }\r\n  \r\n  $menu->add('Contact',  'contact');\r\n\r\n});\r\n?>\r\n```\r\n\r\nThis will generate:\r\n\r\n```html\r\n<ul>\r\n    <li  class=\"navbar navbar-home\" id=\"home\"><a href=\"/\">Home</a></li>\r\n    \r\n    <li  data-role=\"navigation\" class=\"navbar navbar-about dropdown\"><a href=\"http://yourdomain.com/about/summary\"About</a>\r\n    \t<ul>\r\n    \t   <li><a href=\"http://yourdomain.com/about/who-we-are\">Who we are?</a></li>\r\n    \t   <li><a href=\"http://yourdomain.com/about/who-we-are\">What we do?</a></li>\r\n    \t</ul>\r\n    </li>\r\n    \r\n    <li><a href=\"services\">Services</a></li>\r\n    <li><a href=\"contact\">Contact</a></li>\r\n</ul>\r\n```\r\n\r\n## Nested Groups\r\n\r\nLaravel Menu supports nested grouping feature for the menu items. A menu group merges its own attribute with its parent group then shares them between its items:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n\t...\r\n\t\r\n\t$menu->group(array('prefix' => 'pages', 'data-info' => 'test'), function($m){\r\n\t\t\r\n\t\t$about = $m->add('About', 'about');\r\n\t\t\r\n\t\t$about->group(array('prefix' => 'about', 'data-role' => 'navigation'), function($a){\r\n\t\t\r\n\t\t\t$a->add('Who we are', 'who-we-are?');\r\n\t\t\t$a->add('What we do?', 'what-we-do');\r\n\t\t\t$a->add('Our Goals', 'our-goals');\r\n\t\t});\r\n\t});\r\n\t\r\n});\r\n?>\r\n```\r\n\r\nIf we render it as a ul:\r\n\r\n```html\r\n<ul>\r\n\t...\r\n\t<li data-info=\"test\">\r\n\t\t<a href=\"http://yourdomain.com/pages/about\">About</a>\r\n\t\t<ul>\r\n\t\t\t<li data-info=\"test\" data-role=\"navigation\"><a href=\"http://yourdomain.com/pages/about/who-we-are\"></a></li>\r\n\t\t\t<li data-info=\"test\" data-role=\"navigation\"><a href=\"http://yourdomain.com/pages/about/what-we-do\"></a></li>\r\n\t\t\t<li data-info=\"test\" data-role=\"navigation\"><a href=\"http://yourdomain.com/pages/about/our-goals\"></a></li>\r\n\t\t</ul>\r\n\t</li>\r\n</ul>\r\n```\r\n\r\n\r\n## Meta Data\r\n\r\nYou can attach meta data to each menu item if you need, this data can be anything from item placement order to the permissions required for accessing the item:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  ...\r\n  \r\n  $menu->add('Users', array('route'  => 'admin.users'))\r\n       ->meta('permission', 'manage_users');\r\n\r\n});\r\n?>\r\n```\r\n\r\nThis meta data don't do anything to the item and won't be rendered in html. It is the developer who would decides what to do with these data when rendering the menu.\r\n\r\n**To retrieve meta data:**\r\n\r\n```php\r\n<?php\r\n\t...\r\n\t$users = $menu->add('Users', array('route'  => 'admin.users'))\r\n       ->meta('permission', 'manage_users');\r\n       \r\n       $users->meta('permission');   // this will return: 'manage_users'\r\n\t...\r\n?>\r\n```\r\n\r\n## Filtering Menu Items\r\n\r\nWe can filter menu items based on user type, permission or any other policy we may have in our application.\r\n\r\n\r\nLet's proceed with an example:\r\n\r\nWe suppose our `User` model can check whether the user has a permisson or not:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n\r\n  ...\r\n  \r\n  $menu->add('Users', array('route'  => 'admin.users'))\r\n       ->meta('permission', 'manage_users');\r\n\r\n})->filter(function($item){\r\n  if(User::get()->hasRole( $item->meta('permission'))) {\r\n      return true;\r\n  }\r\n  return false;\r\n});\r\n?>\r\n```\r\n\r\n`Users` item will be visible to those who has the `manage_users` permission.\r\n\r\n\r\n## Rendering Formats\r\n\r\nSeveral rendering formats are available out of the box:\r\n\r\n* **Menu as Unordered List**\r\n\r\n```html\r\n  {{ $MenuName->asUl() }}\r\n```\r\n\r\n`asUl()` will render your menu in an unordered list. it also takes an optional parameter to define attributes for the `<ul>` tag itself:\r\n\r\n```php\r\n{{ $MenuName->asUl( array('class' => 'awsome-ul') ) }}\r\n```\r\n\r\nResult:\r\n\r\n```html\r\n<ul class=\"awsome-ul\">\r\n  <li><a href=\"http://yourdomain.com\">Home</a></li>\r\n  <li><a href=\"http://yourdomain.com/about\">About</a></li>\r\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\r\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\r\n</ul>\r\n```\r\n\r\n* **Menu as Ordered List**\r\n\r\n\r\n```php\r\n  {{ $MenuName->asOl() }}\r\n```\r\n\r\n`asOl()` method will render your menu in an ordered list. it also takes an optional parameter to define attributes for the `<ol>` tag itself:\r\n\r\n```php\r\n{{ $MenuName->asOl( array('class' => 'awsome-ol') ) }}\r\n```\r\n\r\nResult:\r\n\r\n```html\r\n<ol class=\"awsome-ol\">\r\n  <li><a href=\"http://yourdomain.com\">Home</a></li>\r\n  <li><a href=\"http://yourdomain.com/about\">About</a></li>\r\n  <li><a href=\"http://yourdomain.com/services\">Services</a></li>\r\n  <li><a href=\"http://yourdomain.com/contact\">Contact</a></li>\r\n</ol>\r\n```\r\n\r\n* **Menu as Div**\r\n\r\n\r\n```php\r\n  {{ $MenuName->asDiv() }}\r\n```\r\n\r\n`asDiv()` method will render your menu as nested html divs. it also takes an optional parameter to define attributes for the parent `<div>` tag itself:\r\n\r\n```php\r\n{{ $MenuName->asDiv( array('class' => 'awsome-div') ) }}\r\n```\r\n\r\nResult:\r\n\r\n```html\r\n<div class=\"awsome-div\">\r\n  <div><a href=\"http://yourdomain.com\">Home</a></div>\r\n  <div><a href=\"http://yourdomain.com/about\">About</a></div>\r\n  <div><a href=\"http://yourdomain.com/services\">Services</a></div>\r\n  <div><a href=\"http://yourdomain.com/contact\">Contact</a></div>\r\n</div>\r\n```\r\n\r\n* **Menu as Bootstrap 3 Navbar**\r\n\r\n```php\r\n  {{ $MenuName->asBootstrap() }}\r\n```\r\n\r\nYou can have your menu as a Bootstrap 3 `navbar`.\r\n\r\n`asBootstrap` method also takes an optional array parameter to defines some configurations, like `inverse` mode.\r\n\r\nTo have your Bootstrap 3 navbar in `inverse` mode:\r\n\r\n\r\n```php\r\n  {{ $MenuName->asBootstrap(array('inverse' => true)  ) }}\r\n```\r\n\r\n## View methods\r\n\r\n**Menu**\r\n\r\n* `roots()`  Returns menu items in root level (items with no parent)\r\n* `whereParent(int $pid)`  Returns items with the given parent id($pid)\r\n* `render(string $type, $integer $pid)` Renders menu items at a given level\r\n* `asUl(array $attributes)` Renders menu in an unordered list\r\n* `asOl(array $attributes)` Renders menu in an unordered list\r\n* `asDiv(array $attributes)` Renders menu in html divs\r\n* `asBootstrap(array $options)`Renders menu as Bootstrap 3 navbar\r\n\r\n**MenuItem**\r\n\r\n* `hasChilderen()` Checks whether the item has childeren and returns a boolean accordingly\r\n* `childeren()` Returns all subitems of the item as an array of MenuItem objects\r\n* `get_id()` Returns `id` of the item\r\n* `get_pid()` Returns `pid` of the item\r\n* `get_attributes()` Returns your item attributes as an array\r\n* `get_title()` Returns item title\r\n* `get_url()` Returns menu item url\r\n* `link()` Generates an html link based on your settings\r\n* `meta(string $name, string $value)` Sets or gets meta data of an item \r\n\r\n\r\n## Advanced Usage\r\n\r\nIt is also possible to render your menus in your own views.\r\n\r\nIf you'd like to render your menu(s) according to your own design, you should create two views.\r\n\r\n* `View-1`  This view contains all the html codes like `nav` or `ul` or `div` tags wrapping your menu items.\r\n* `View-2`  This view is responsible for rendering menu items and it is included in `View-1`.\r\n\r\n\r\nThe reason we use two view files here is that `View-2` calls itself recursively to render the items to the deepest level in multi-level menus.\r\n\r\nLet's make this easier with an example:\r\n\r\nIn our `routes.php`:\r\n\r\n```php\r\n<?php\r\nMenu::make('MyNavBar', function($menu){\r\n  \r\n  $menu->add('Home',     '');\r\n  \r\n  $about = $menu->add('About',    array('route'  => 'page.about'));\r\n           $about->add('Who are we?', 'who-we-are');\r\n           $about->add('What we do?', 'what-we-do');\r\n\r\n  $menu->add('services', 'services');\r\n  $menu->add('Contact',  'contact');\r\n  \r\n});\r\n?>\r\n```\r\n\r\nIn this example we name View-1 `custom-menu.blade.php` and View-2 `custom-menu-items.blade.php`.\r\n\r\n**custom-menu.blade.php**\r\n```html\r\n<nav class=\"navbar\">\r\n  <ul class=\"horizontal-navbar\">\r\n    @include('custom-menu-items', array('items', $MyNavBar->roots()))\r\n  </ul>\r\n</nav><!--/nav-->\r\n```\r\n\r\n**custom-menu-items.blade.php**\r\n```html\r\n@foreach($items as $item)\r\n  <li @if($item->hasChilderen()) class=\"dropdown\" @endif>\r\n      <a href=\"{{ $item->link->url }}\">{{ $item->link->title }} </a>\r\n      @if($item->hasChilderen())\r\n        <ul class=\"dropdown-menu\">\r\n              @include('custom-menu-items', array('items' => $item->childeren()))\r\n        </ul> \r\n      @endif\r\n  </li>\r\n@endforeach\r\n```\r\n\r\nLet's describe what we did above, In `custom-menus.blade.php` we put whatever html code we had according to our design, then we included `custom-menu-items.blade.php` and passed the menu items at *root level* to `custom-menu-items.blade.php`:\r\n\r\n```php\r\n...\r\n@include('custom-menu-items', array('items' => $menu->roots()))\r\n...\r\n```\r\n\r\nIn `custom-menu-items.blade.php` we run a foreach loop control and call the file recursively for rendering the items to the deepest level required.\r\n\r\nTo put the rendered menu in your application template, you can simply include `custom-menu` view in your master layout.\r\n\r\nI've prepared a tutorial about embedding several menu objects in a bootstrap navbar in case somebody is interested.\r\nYou can read all about it [here](https://gist.github.com/lavary/c9da317446e2e3b32779).\r\n\r\n## If you need help\r\n\r\nPlease submit all issues and questions using GitHub issues and I will try to help you.\r\n\r\n\r\n## License\r\n\r\nLaravel Menu is free software distributed under the terms of the MIT license\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}